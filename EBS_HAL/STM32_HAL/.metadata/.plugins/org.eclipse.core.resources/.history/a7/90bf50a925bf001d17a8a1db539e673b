/*
 * ebs.c
 *
 *  Created on: Dec 31, 2022
 *      Author: thunoerobot
 */
#include "ebs.h"
#include "main.h"
#include "tim.h"
#include "math.h"
uint8_t EBS_error = 0;
uint8_t AS_state = 0;
uint8_t pre_AS_state = 0;
uint8_t error_state_transition = 0;
uint8_t ebs_check_flag = 3;
uint8_t oil_lf_lose = 0;
uint8_t oil_lb_lose = 0;
uint8_t oil_rf_lose = 0;
uint8_t oil_rb_lose = 0;
uint8_t air_lose = 0;
uint8_t validation_error = 0;
uint8_t air_path_failure = 0;
uint8_t air_insufficient = 0;
int ABS_int(int x) {
	if (x < 0) x = -x;
	return x;
}
/*会不会发生AMI和EBS状态机不同步的问题？
 * 长时间EBS和AMI状态机不同步，AMI在非有人时，应进入紧急制动状态
 *
 * */
void EBS_FSM(uint8_t state) {
	if (pre_AS_state == state) return;
	switch(pre_AS_state) {
	case LV:
		if (state == Manual_HV || state == AS_HV) {
			EBS_FSM_Event(pre_AS_state, state);
			pre_AS_state = state;
			error_state_transition = 0;
		}
		else error_state_transition = LV;
		break;
	case Manual_HV:
		if (state == LV) {
			EBS_FSM_Event(pre_AS_state, state);
			pre_AS_state = state;
			error_state_transition = 0;
		}
		else error_state_transition = Manual_HV;
		break;
	case AS_HV:
		if (state == AS_Ready || state == AS_Emergency) {
			EBS_FSM_Event(pre_AS_state, state);
			pre_AS_state = state;
			error_state_transition = 0;
		}
		else error_state_transition = AS_HV;

		break;
	case AS_Ready:
		if (state == AS_Driving || state == AS_Emergency) {
			EBS_FSM_Event(pre_AS_state, state);
			pre_AS_state = state;
		}
		else error_state_transition = AS_Ready;
		break;
	case AS_Driving:
		if (state == AS_Ready || state == AS_Finished || state == AS_Emergency) {
			EBS_FSM_Event(pre_AS_state, state);
			pre_AS_state = state;

		}
		else error_state_transition = AS_Driving;
		break;
	case AS_Finished:
		if (state == AS_Emergency) {
			EBS_FSM_Event(pre_AS_state, state);
			pre_AS_state = state;
		}
		else error_state_transition = AS_Finished;
		break;
	default:
		error_state_transition = 7;
		EBS_FSM_Event(pre_AS_state, AS_Emergency);
		pre_AS_state = AS_Emergency;
	}
}
void EBS_FSM_Event(uint8_t pre_state, uint8_t state) {
	switch(state) {
	case LV:
		AS_mode_ON;
		brake1_ON;
		brake2_ON;
		watchdog_f = 1;
		break;
	case Manual_HV:
		AS_mode_ON; // change to manual mode
		brake1_ON;
		brake2_ON;
		watchdog_f = 1;
		break;
	case AS_HV:
		AS_mode_OFF;
		brake1_OFF;
		brake1_OFF;
		watchdog_f = 1;
		break;
	case AS_Ready:
		AS_mode_OFF;
		brake1_OFF;
		brake1_OFF;
		watchdog_f = 1;
		if (pre_state == AS_Driving) {
			air_brake_time1_flag = 1;
			air_brake_time1 = air_brake_time2 = air_brake_time3 = 0;
			BTC_timeout_flag = 1;
			BTC_timeout = 0;
		}
		break;
	case AS_Driving: // Because the motor in the process of provide torque braking doesn't release resulting in slip ???
		AS_mode_OFF;
		brake1_ON;
		brake2_ON;
		air_release_time_flag = oil_release_time_flag = 1;
		air_release_time = oil_release_time = 0;
		BRC_timeout_flag = 1;
		BRC_timeout = 0;
		watchdog_f = 0;
		break;
	case AS_Emergency:
		AS_mode_OFF;
		brake1_OFF;
		brake2_OFF;
		watchdog_f = 0;
		if (pre_state == AS_Driving) {
			air_brake_time1_flag = 1;
			air_brake_time1 = air_brake_time2 = air_brake_time3 = 0;
			BTC_timeout_flag = 1;
			BTC_timeout = 0;
		}
		break;
	case AS_Finished:
		AS_mode_OFF;
		brake1_OFF;
		brake2_OFF;
		if (pre_state == AS_Driving) {
			air_brake_time1_flag = 1;
			air_brake_time1 = air_brake_time2 = air_brake_time3 = 0;
			BTC_timeout_flag = 1;
			BTC_timeout = 0;
		}
		break;
	default:
		AS_mode_OFF;
		brake1_OFF;
		brake2_OFF;
	}
}
uint8_t EBS_Check() {
	switch(pre_AS_state) {
	case LV:
		EBS_Check_Event(OIL_CHECK);
		EBS_Check_Event(AIR_CHECK);
		break;
	case Manual_HV:
		break;
	case AS_HV:
		EBS_Check_Event(BRAKE_CHECK);
		break;
	case AS_Driving:
		if (air_release_time_flag | air_release_time_flag)
			EBS_Check_Event(BRAKE_RELEASE_CHECK);
		else {
			EBS_Check_Event(OIL_CHECK);
			EBS_Check_Event(AIR_CHECK);
		}
		break;
	case AS_Ready:
	case AS_Emergency:
	case AS_Finished:
		if (air_brake_time2_flag | air_brake_time3_flag | air_brake_time1_flag)
			EBS_Check(BRAKE_TOGGLE_CHECK);
		else {
			EBS_Check_Event(BRAKE_CHECK);
		}
		break;
	}
	return 1;
}

uint8_t EBS_Check_Event(uint8_t status) {
	switch(status) {
	case VALIDATION_CHECK: // LV EBS check
		if (HAL_GPIO_ReadPin(SDC_AS_PORT, SDC_AS_PIN) != GPIO_PIN_RESET) return 0;
		AS_mode_ON;
		HAL_Delay(100);
		if (HAL_GPIO_ReadPin(SDC_AS_PORT, SDC_AS_PIN) != GPIO_PIN_SET) return 0;
		EBS_error_OFF;
		AS_mode_OFF;
		ebs_check_flag &= 2;
		return 1;
	case OIL_CHECK:

		if (value[LF_OIL] <= OIL_Min || value[LB_OIL] <= OIL_Min || value[RF_OIL] <= OIL_Min || value[RB_OIL] <= OIL_Min) {
			if (value[LF_OIL] <= OIL_Min) oil_lf_lose = 1;
			if (value[LB_OIL] <= OIL_Min) oil_lb_lose = 1;
			if (value[RF_OIL] <= OIL_Min) oil_rf_lose = 1;
			if (value[RB_OIL] <= OIL_Min) oil_rb_lose = 1;
			return 0;
		}
		oil_lf_lose = oil_lb_lose = oil_rf_lose = oil_rb_lose = 0;
		return 1;
	case AIR_CHECK:
		if (value[AIR] <= AIR_Min) {
			air_lose = 0;
			return 0;
		}
		air_lose = 1;
		return 1;
	case BRAKE_TOGGLE_CHECK:
		if (air_brake_time1_flag && air_temp[2] - air_temp[3] > air_e_max) {
			air_brake_time1_flag = 0;
			air_brake_time2_flag = 1;
		}
		if (air_brake_time2_flag && air_temp[3] - air_temp[2] > air_e_max) {
			air_brake_time2_flag = 0;
			air_brake_time3_flag = 1;
		}
		if (air_brake_time3_flag && ABS_int((air_temp[3] - air_temp[2])) < air_e_max && ABS_int(air_temp[2] - air_temp[1]) < air_e_max)
			air_brake_time3_flag = 0;
		if (!(air_brake_time2_flag | air_brake_time3_flag | air_brake_time1_flag)) BTC_timeout_flag = BTC_timeout = 0;
		return EBS_Check_Event(OIL_CHECK) & EBS_Check_Event(AIR_CHECK);
	case BRAKE_CHECK:
		if (value[AIR] < AIR_BRAKE_MIN || value[LF_OIL] < OIL_BRAKE_MIN || value[LB_OIL] < OIL_BRAKE_MIN
				|| value[RF_OIL] < OIL_BRAKE_MIN ||value[RB_OIL] < OIL_BRAKE_MIN) {

			if (value[AIR] < AIR_BRAKE_MIN)
				air_insufficient = 1;
			if (value[LF_OIL] < OIL_BRAKE_MIN || value[LB_OIL] < OIL_BRAKE_MIN
					|| value[RF_OIL] < OIL_BRAKE_MIN ||value[RB_OIL] < OIL_BRAKE_MIN)
				air_path_failure = 1;
			EBS_Check_Event(OIL_CHECK);
			EBS_Check_Event(AIR_CHECK);
			return 0;
		}
			else return EBS_Check_Event(OIL_CHECK) & EBS_Check_Event(AIR_CHECK);
	case BRAKE_RELEASE_CHECK:
		if (air_release_time_flag && ABS_int(air_temp[2] - air_temp[1]) < air_e_max && ABS_int(air_temp[3] - air_temp[2]) < air_e_max
				&& ABS_int(air_temp[1] - air_temp[0]) > air_e_max) {
			air_release_time_flag = 0;
		}
		if (oil_release_time_flag && value[LF_OIL] < OIL_Release_Max && value[LB_OIL] < OIL_Release_Max
				&& value[RF_OIL] < OIL_Release_Max && value[RB_OIL] < OIL_Release_Max)
			air_release_time_flag = 0;
		if (!(air_release_time_flag | air_release_time_flag)) BRC_timeout_flag = BRC_timeout = 0;
		return EBS_Check_Event(OIL_CHECK) & EBS_Check_Event(AIR_CHECK);

	}
	return 0;
}
